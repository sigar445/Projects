To implement a distributed Tic Tac Toe game using Kafka, let’s break down the project into smaller tasks and build a structured approach. Below are the steps, along with some code snippets to help you get started.

### 1. **Project Setup**

1. **Create a new Spring Boot project**:
   - You can use [Spring Initializr](https://start.spring.io/) to set up the project quickly with dependencies for:
     - Kafka
     - Spring Web (optional, for REST API to communicate with clients)
   - Use Maven or Gradle as a build tool, and Java 11 or later.

2. **Define Dependencies** in your `pom.xml` (for Maven) or `build.gradle` (for Gradle):

   ```xml
   <!-- pom.xml -->
   <dependencies>
       <!-- Spring Boot Web -->
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-web</artifactId>
       </dependency>
       <!-- Spring Boot for Kafka -->
       <dependency>
           <groupId>org.springframework.kafka</groupId>
           <artifactId>spring-kafka</artifactId>
       </dependency>
   </dependencies>
   ```

3. **Dockerize Kafka and Zookeeper**:
   - You can set up Kafka and Zookeeper using Docker for local development.
   - Create a `docker-compose.yml` file with Kafka and Zookeeper services:

     ```yaml
     version: '3'
     services:
       zookeeper:
         image: wurstmeister/zookeeper
         ports:
           - "2181:2181"
       kafka:
         image: wurstmeister/kafka
         ports:
           - "9092:9092"
         environment:
           KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
           KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
         depends_on:
           - zookeeper
     ```

### 2. **Define Kafka Topics and Partitions**

Define Kafka topics for different types of events in the game. You can use a single topic like `tic-tac-toe-moves` with multiple partitions if you plan on scaling this out.

### 3. **Game Components Setup**

- **Game State**: Represent the Tic Tac Toe board state as a 3x3 matrix.
- **Player Moves**: Represent each move as an event with the player's ID, the cell they choose, and a timestamp.

### 4. **Create Models and Kafka Configuration**

Define the models for `GameState` and `PlayerMove` in Java.

**Models:**

```java
// PlayerMove.java
public class PlayerMove {
    private String playerId;
    private int row;
    private int col;
    private long timestamp;

    // Getters and Setters
}

// GameState.java
public class GameState {
    private char[][] board = new char[3][3];
    private String currentPlayer;

    public GameState() {
        for (int i = 0; i < 3; i++) {
            Arrays.fill(board[i], '-');
        }
        currentPlayer = "X"; // Start with player X
    }

    // Methods to update board, check for a win, and change the player turn
}
```

**Kafka Configuration:**

```java
// KafkaConfig.java
import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.TopicBuilder;

@Configuration
public class KafkaConfig {

    @Bean
    public NewTopic topic() {
        return TopicBuilder.name("tic-tac-toe-moves")
                           .partitions(3)
                           .replicas(1)
                           .build();
    }
}
```

### 5. **Implement Producer and Consumer**

- **Producer**: This service sends each move as a message to the `tic-tac-toe-moves` topic.
- **Consumer**: Listens to the topic and processes each move, updating the game state.

**Producer Service:**

```java
// MoveProducer.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class MoveProducer {

    private static final String TOPIC = "tic-tac-toe-moves";

    @Autowired
    private KafkaTemplate<String, PlayerMove> kafkaTemplate;

    public void sendMove(PlayerMove move) {
        kafkaTemplate.send(TOPIC, move);
    }
}
```

**Consumer Service:**

```java
// MoveConsumer.java
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class MoveConsumer {

    private GameState gameState = new GameState();

    @KafkaListener(topics = "tic-tac-toe-moves", groupId = "tic-tac-toe-group")
    public void consume(PlayerMove move) {
        System.out.println("Received move: " + move);
        updateGameState(move);
    }

    private void updateGameState(PlayerMove move) {
        // Update board and check for win conditions
        // Switch players after each valid move
    }
}
```

### 6. **Implement Game Logic**

In `GameState`, implement methods to:
- **Validate Moves**: Ensure moves are on empty spaces and alternate between players.
- **Check Win Condition**: After each move, check if there’s a winning line or the game is a draw.

```java
// GameState.java (continuation)
public boolean isWinningMove() {
    // Check rows, columns, and diagonals for a win
}

public boolean isDraw() {
    // Check if the board is fully occupied
}
```

### 7. **Testing and Running the Game**

1. Start Kafka and Zookeeper using Docker:

   ```bash
   docker-compose up -d
   ```

2. Run the Spring Boot application. Use REST endpoints to simulate player moves, or use a basic UI if needed.

3. **Testing**: Simulate moves by calling the producer’s `sendMove()` method, ensuring that the consumer correctly updates the game state.

### 8. **Expand the Game**

- Add more consumers and partition the topic to allow more consumers to handle updates concurrently.
- Handle cases where the game state may need to be reset after each game.