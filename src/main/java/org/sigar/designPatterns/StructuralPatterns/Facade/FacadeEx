The Facade Design Pattern provides a simplified interface to a complex subsystem, making it easier to use and understand. It's particularly useful when dealing with complex systems where the client doesn't need to interact with all the components directly. Instead, a facade class provides a unified interface to the subsystem.

### Key Concepts:
- **Facade:** The class that provides a simple interface to the complex subsystem.
- **Subsystem:** The underlying classes and methods that perform the actual work.

### Practical Example: Home Theater System

Imagine you have a complex home theater system with various components like a DVD player, sound system, projector, and lights. Each of these components has its own set of operations, which can be overwhelming for the user. The Facade Pattern can be used to simplify the operation of turning on the home theater system.

#### 1. Subsystem Classes:
These are the individual components of the home theater system.

```java
public class DVDPlayer {
    public void on() {
        System.out.println("DVD Player is on");
    }
    public void play(String movie) {
        System.out.println("Playing movie: " + movie);
    }
    public void stop() {
        System.out.println("Stopping movie");
    }
    public void off() {
        System.out.println("DVD Player is off");
    }
}

public class Projector {
    public void on() {
        System.out.println("Projector is on");
    }
    public void off() {
        System.out.println("Projector is off");
    }
    public void wideScreenMode() {
        System.out.println("Projector in widescreen mode");
    }
}

public class SoundSystem {
    public void on() {
        System.out.println("Sound System is on");
    }
    public void setVolume(int level) {
        System.out.println("Setting volume to " + level);
    }
    public void off() {
        System.out.println("Sound System is off");
    }
}

public class Lights {
    public void dim(int level) {
        System.out.println("Dimming lights to " + level + "%");
    }
}
```

#### 2. Facade Class:
The `HomeTheaterFacade` class provides a simplified interface to control the entire home theater system.

```java
public class HomeTheaterFacade {
    private DVDPlayer dvdPlayer;
    private Projector projector;
    private SoundSystem soundSystem;
    private Lights lights;

    public HomeTheaterFacade(DVDPlayer dvd, Projector projector, SoundSystem sound, Lights lights) {
        this.dvdPlayer = dvd;
        this.projector = projector;
        this.soundSystem = sound;
        this.lights = lights;
    }

    public void watchMovie(String movie) {
        System.out.println("Get ready to watch a movie...");
        lights.dim(10);
        projector.on();
        projector.wideScreenMode();
        soundSystem.on();
        soundSystem.setVolume(5);
        dvdPlayer.on();
        dvdPlayer.play(movie);
    }

    public void endMovie() {
        System.out.println("Shutting movie theater down...");
        dvdPlayer.stop();
        dvdPlayer.off();
        soundSystem.off();
        projector.off();
        lights.dim(100);
    }
}
```

#### 3. Client Code:
The client interacts with the `HomeTheaterFacade`, making it easy to control the entire system.

```java
public class Main {
    public static void main(String[] args) {
        DVDPlayer dvd = new DVDPlayer();
        Projector projector = new Projector();
        SoundSystem sound = new SoundSystem();
        Lights lights = new Lights();

        HomeTheaterFacade homeTheater = new HomeTheaterFacade(dvd, projector, sound, lights);

        homeTheater.watchMovie("Inception");
        // Output:
        // Get ready to watch a movie...
        // Dimming lights to 10%
        // Projector is on
        // Projector in widescreen mode
        // Sound System is on
        // Setting volume to 5
        // DVD Player is on
        // Playing movie: Inception

        homeTheater.endMovie();
        // Output:
        // Shutting movie theater down...
        // Stopping movie
        // DVD Player is off
        // Sound System is off
        // Projector is off
        // Dimming lights to 100%
    }
}
```

### Benefits of Using the Facade Pattern:
1. **Simplifies Complexity:** The client interacts with a single facade class instead of multiple subsystem classes, reducing complexity.
2. **Loose Coupling:** The client is loosely coupled with the subsystem classes, which makes the system more flexible and easier to maintain.
3. **Encapsulation:** The facade hides the internal workings of the subsystem, providing a clean interface for the client.

### Use Cases:
- **Legacy Systems:** When integrating new features or systems with existing complex subsystems, a facade can provide a simplified interface.
- **Complex APIs:** Facades can wrap complex APIs to provide a more straightforward interface for users or other systems.

The Facade Pattern is ideal when you need to simplify interactions with complex systems or when you want to provide a unified interface to a group of related classes.

Here's another practical example of the Facade Design Pattern, applied to a bank system that handles customer transactions. In this scenario, the bank system has several subsystems like account verification, funds checking, and transaction handling. The Facade Pattern can simplify the process for the customer by providing a single interface to perform operations like withdrawing or depositing money.

### 1. **Subsystem Classes:**
These classes represent the individual components of the bank system.

```java
// Account Number Verification
public class AccountNumberCheck {
    private int accountNumber = 12345678;

    public int getAccountNumber() {
        return accountNumber;
    }

    public boolean isAccountActive(int acctNumToCheck) {
        return acctNumToCheck == getAccountNumber();
    }
}

// Security Code Verification
public class SecurityCodeCheck {
    private int securityCode = 1234;

    public int getSecurityCode() {
        return securityCode;
    }

    public boolean isCodeCorrect(int secCodeToCheck) {
        return secCodeToCheck == getSecurityCode();
    }
}

// Funds Check
public class FundsCheck {
    private double cashInAccount = 1000.00;

    public double getCashInAccount() {
        return cashInAccount;
    }

    public void decreaseCashInAccount(double cashWithdrawn) {
        cashInAccount -= cashWithdrawn;
    }

    public void increaseCashInAccount(double cashDeposited) {
        cashInAccount += cashDeposited;
    }

    public boolean haveEnoughMoney(double cashToWithdraw) {
        if (cashToWithdraw > getCashInAccount()) {
            System.out.println("Error: You don't have enough money.");
            System.out.println("Current Balance: " + getCashInAccount());
            return false;
        } else {
            decreaseCashInAccount(cashToWithdraw);
            System.out.println("Withdrawal Complete: Current Balance is " + getCashInAccount());
            return true;
        }
    }

    public void makeDeposit(double cashToDeposit) {
        increaseCashInAccount(cashToDeposit);
        System.out.println("Deposit Complete: Current Balance is " + getCashInAccount());
    }
}
```

### 2. **Facade Class:**
The `BankAccountFacade` class provides a simplified interface for interacting with the bank's subsystems.

```java
public class BankAccountFacade {
    private int accountNumber;
    private int securityCode;

    private AccountNumberCheck acctChecker;
    private SecurityCodeCheck codeChecker;
    private FundsCheck fundsChecker;

    public BankAccountFacade(int newAcctNum, int newSecCode) {
        accountNumber = newAcctNum;
        securityCode = newSecCode;

        acctChecker = new AccountNumberCheck();
        codeChecker = new SecurityCodeCheck();
        fundsChecker = new FundsCheck();
    }

    public void withdrawCash(double cashToGet) {
        if (acctChecker.isAccountActive(accountNumber) && codeChecker.isCodeCorrect(securityCode)
                && fundsChecker.haveEnoughMoney(cashToGet)) {
            System.out.println("Transaction Complete: Withdrawal of " + cashToGet);
        } else {
            System.out.println("Transaction Failed: Withdrawal of " + cashToGet);
        }
    }

    public void depositCash(double cashToDeposit) {
        if (acctChecker.isAccountActive(accountNumber) && codeChecker.isCodeCorrect(securityCode)) {
            fundsChecker.makeDeposit(cashToDeposit);
            System.out.println("Transaction Complete: Deposit of " + cashToDeposit);
        } else {
            System.out.println("Transaction Failed: Deposit of " + cashToDeposit);
        }
    }
}
```

### 3. **Client Code:**
The client interacts with the `BankAccountFacade`, making it easier to perform transactions without dealing with the complexity of the underlying subsystems.

```java
public class Main {
    public static void main(String[] args) {
        BankAccountFacade accessingBank = new BankAccountFacade(12345678, 1234);

        accessingBank.withdrawCash(50.00);
        // Output:
        // Withdrawal Complete: Current Balance is 950.0
        // Transaction Complete: Withdrawal of 50.0

        accessingBank.depositCash(200.00);
        // Output:
        // Deposit Complete: Current Balance is 1150.0
        // Transaction Complete: Deposit of 200.0

        accessingBank.withdrawCash(1200.00);
        // Output:
        // Error: You don't have enough money.
        // Current Balance: 1150.0
        // Transaction Failed: Withdrawal of 1200.0
    }
}
```

### Explanation:

1. **Subsystem Classes:**
   - **AccountNumberCheck:** Verifies if the account number is valid.
   - **SecurityCodeCheck:** Verifies if the security code is correct.
   - **FundsCheck:** Checks if there are enough funds for a withdrawal and handles deposits.

2. **Facade Class (BankAccountFacade):**
   - **BankAccountFacade:** Provides methods like `withdrawCash()` and `depositCash()` to perform transactions. It interacts with the underlying subsystems (`AccountNumberCheck`, `SecurityCodeCheck`, `FundsCheck`) to complete these operations.

3. **Client Code:**
   - The `Main` class demonstrates how to use the `BankAccountFacade` to perform a withdrawal and a deposit. The client does not need to know about the complex checks involved in the process, as the facade handles all the details.

### Benefits of This Approach:
- **Simplification:** The client interacts with a simple interface (`BankAccountFacade`) rather than dealing with multiple classes and methods directly.
- **Encapsulation:** The facade hides the complexities of the bank's internal processes, making it easier for the client to perform transactions.
- **Flexibility:** The underlying subsystem classes can be modified without affecting the client code, as long as the facade's interface remains consistent.

### Use Cases:
- **Bank Systems:** When providing services like online banking or ATM operations, a facade can simplify the user's interaction with the system.
- **Complex Operations:** When a series of complex operations need to be performed in a specific order, a facade can encapsulate this logic and provide a simple method for the client to invoke.

This example demonstrates how the Facade Pattern can be applied to a real-world banking system, making it easier for clients to perform complex operations with minimal effort.