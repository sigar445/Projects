SQL `JOIN` is used to combine rows from two or more tables based on a related column. It allows querying data spread across multiple tables and retrieving it as a unified result set.

There are different types of joins in SQL, including:

1. **INNER JOIN**: Returns only matching rows from both tables.
2. **LEFT (OUTER) JOIN**: Returns all rows from the left table and matched rows from the right table. Unmatched rows from the right table are returned as `NULL`.
3. **RIGHT (OUTER) JOIN**: Returns all rows from the right table and matched rows from the left table. Unmatched rows from the left table are returned as `NULL`.
4. **FULL (OUTER) JOIN**: Returns all rows when there is a match in either the left or right table. Unmatched rows are returned as `NULL`.
5. **CROSS JOIN**: Returns the Cartesian product of the two tables (all possible combinations of rows).

Let's go through these join types step by step using two sample tables: `Employees` and `Departments`.

### Step 1: Creating Sample Tables

Weâ€™ll create two tables: `Employees` and `Departments`.

```sql
-- Creating Employees table
CREATE TABLE Employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    department_id INT,
    salary DECIMAL(10, 2)
);

-- Creating Departments table
CREATE TABLE Departments (
    id INT PRIMARY KEY,
    name VARCHAR(100)
);
```

### Step 2: Inserting Sample Data

```sql
-- Inserting data into Departments table
INSERT INTO Departments (id, name)
VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Marketing');

-- Inserting data into Employees table
INSERT INTO Employees (id, name, department_id, salary)
VALUES
(1, 'Alice', 1, 50000),
(2, 'Bob', 2, 75000),
(3, 'Charlie', 2, 60000),
(4, 'Diana', 3, 45000),
(5, 'Edward', NULL, 47000);  -- No department
```

**Sample Data**:

**Departments Table**:
| id  | name        |
| --- | ----------- |
| 1   | HR          |
| 2   | Engineering |
| 3   | Marketing   |

**Employees Table**:
| id  | name    | department_id | salary  |
| --- | ------- | ------------- | ------- |
| 1   | Alice   | 1             | 50000   |
| 2   | Bob     | 2             | 75000   |
| 3   | Charlie | 2             | 60000   |
| 4   | Diana   | 3             | 45000   |
| 5   | Edward  | NULL          | 47000   |

### Step 3: Types of Joins

#### 1. **INNER JOIN**

`INNER JOIN` returns only rows where there is a match in both tables (Employees and Departments).

```sql
-- INNER JOIN: Retrieve employees and their department names
SELECT e.name AS employee_name, d.name AS department_name, e.salary
FROM Employees e
INNER JOIN Departments d
ON e.department_id = d.id;
```

**Explanation**: This query will only return rows where the `department_id` from `Employees` matches the `id` in the `Departments` table.

**Result**:

| employee_name | department_name | salary  |
| ------------- | --------------- | ------- |
| Alice         | HR              | 50000   |
| Bob           | Engineering     | 75000   |
| Charlie       | Engineering     | 60000   |
| Diana         | Marketing       | 45000   |

Notice that **Edward** does not appear because he has no matching department (`department_id` is `NULL`).

#### 2. **LEFT (OUTER) JOIN**

`LEFT JOIN` returns all rows from the left table (`Employees`), and the matched rows from the right table (`Departments`). If there is no match, `NULL` values are returned for columns from the right table.

```sql
-- LEFT JOIN: Retrieve all employees and their department names (even if they don't belong to any department)
SELECT e.name AS employee_name, d.name AS department_name, e.salary
FROM Employees e
LEFT JOIN Departments d
ON e.department_id = d.id;
```

**Result**:

| employee_name | department_name | salary  |
| ------------- | --------------- | ------- |
| Alice         | HR              | 50000   |
| Bob           | Engineering     | 75000   |
| Charlie       | Engineering     | 60000   |
| Diana         | Marketing       | 45000   |
| Edward        | NULL            | 47000   |

Here, **Edward** appears with a `NULL` value for `department_name` since he doesn't belong to any department.

#### 3. **RIGHT (OUTER) JOIN**

`RIGHT JOIN` returns all rows from the right table (`Departments`), and the matched rows from the left table (`Employees`). If there is no match, `NULL` values are returned for columns from the left table.

```sql
-- RIGHT JOIN: Retrieve all departments and their employees (even if no employee is in the department)
SELECT e.name AS employee_name, d.name AS department_name, e.salary
FROM Employees e
RIGHT JOIN Departments d
ON e.department_id = d.id;
```

**Result**:

| employee_name | department_name | salary  |
| ------------- | --------------- | ------- |
| Alice         | HR              | 50000   |
| Bob           | Engineering     | 75000   |
| Charlie       | Engineering     | 60000   |
| Diana         | Marketing       | 45000   |
| NULL          | Marketing       | NULL    |

In this case, since there are no employees in the `Marketing` department, the row is returned with `NULL` for the `employee_name` and `salary`.

#### 4. **FULL (OUTER) JOIN**

`FULL JOIN` returns all rows from both the left and right tables. If there is no match, `NULL` values are returned for the missing side.

```sql
-- FULL JOIN: Retrieve all employees and departments, even if they don't match
SELECT e.name AS employee_name, d.name AS department_name, e.salary
FROM Employees e
FULL OUTER JOIN Departments d
ON e.department_id = d.id;
```

**Result**:

| employee_name | department_name | salary  |
| ------------- | --------------- | ------- |
| Alice         | HR              | 50000   |
| Bob           | Engineering     | 75000   |
| Charlie       | Engineering     | 60000   |
| Diana         | Marketing       | 45000   |
| Edward        | NULL            | 47000   |
| NULL          | Marketing       | NULL    |

The `FULL JOIN` returns all rows from both tables, showing `NULL` for missing data. Here, `Edward` doesn't belong to a department, and no employee is working in the `Marketing` department.

#### 5. **CROSS JOIN**

`CROSS JOIN` returns the Cartesian product of both tables, which means every combination of rows from both tables. This typically returns a large result set and is used less frequently.

```sql
-- CROSS JOIN: Generate a Cartesian product of employees and departments
SELECT e.name AS employee_name, d.name AS department_name
FROM Employees e
CROSS JOIN Departments d;
```

**Result**:

| employee_name | department_name |
| ------------- | --------------- |
| Alice         | HR              |
| Alice         | Engineering     |
| Alice         | Marketing       |
| Bob           | HR              |
| Bob           | Engineering     |
| Bob           | Marketing       |
| Charlie       | HR              |
| Charlie       | Engineering     |
| Charlie       | Marketing       |
| Diana         | HR              |
| Diana         | Engineering     |
| Diana         | Marketing       |
| Edward        | HR              |
| Edward        | Engineering     |
| Edward        | Marketing       |

The `CROSS JOIN` results in every combination of employees and departments, producing all possible pairs.

### Summary of Joins:

- **INNER JOIN**: Returns rows that have matching values in both tables.
- **LEFT JOIN**: Returns all rows from the left table and matching rows from the right table. Non-matching rows from the right table are `NULL`.
- **RIGHT JOIN**: Returns all rows from the right table and matching rows from the left table. Non-matching rows from the left table are `NULL`.
- **FULL JOIN**: Returns all rows from both tables. Non-matching rows are returned as `NULL` for the missing values.
- **CROSS JOIN**: Returns the Cartesian product (all possible combinations) of both tables.

Each join type serves a specific purpose depending on how much data you need from each table, and they are fundamental tools for working with relational databases!     