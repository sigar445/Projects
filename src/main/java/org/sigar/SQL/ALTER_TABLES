In PostgreSQL, you can perform various alterations on existing tables using the `ALTER TABLE` command. Here are some common types of alterations along with the syntax for each:

### 1. **Add a New Column**

You can add a new column to a table using the `ADD COLUMN` clause.

```sql
ALTER TABLE table_name
ADD COLUMN column_name data_type [constraint];
```

**Example:**
```sql
ALTER TABLE sales
ADD COLUMN discount numeric(10, 2);
```

### 2. **Drop a Column**

You can remove a column from a table using the `DROP COLUMN` clause.

```sql
ALTER TABLE table_name
DROP COLUMN column_name;
```

**Example:**
```sql
ALTER TABLE sales
DROP COLUMN discount;
```

### 3. **Rename a Column**

You can rename a column using the `RENAME COLUMN` clause.

```sql
ALTER TABLE table_name
RENAME COLUMN old_column_name TO new_column_name;
```

**Example:**
```sql
ALTER TABLE sales
RENAME COLUMN total_sales TO sales_amount;
```

### 4. **Change Data Type of a Column**

You can change the data type of an existing column using the `ALTER COLUMN ... TYPE` clause.

```sql
ALTER TABLE table_name
ALTER COLUMN column_name TYPE new_data_type;
```

**Example:**
```sql
ALTER TABLE sales
ALTER COLUMN quantity TYPE bigint;
```

### 5. **Set a Column to NOT NULL**

You can set a column to be `NOT NULL` to enforce that it cannot contain NULL values.

```sql
ALTER TABLE table_name
ALTER COLUMN column_name SET NOT NULL;
```

**Example:**
```sql
ALTER TABLE sales
ALTER COLUMN product SET NOT NULL;
```

### 6. **Drop NOT NULL Constraint**

You can drop the `NOT NULL` constraint from a column.

```sql
ALTER TABLE table_name
ALTER COLUMN column_name DROP NOT NULL;
```

**Example:**
```sql
ALTER TABLE sales
ALTER COLUMN product DROP NOT NULL;
```

### 7. **Add a Constraint**

You can add a constraint to an existing column.

```sql
ALTER TABLE table_name
ADD CONSTRAINT constraint_name constraint_type (column_name);
```

**Example:**
```sql
ALTER TABLE sales
ADD CONSTRAINT unique_product UNIQUE (product);
```

### 8. **Drop a Constraint**

You can drop a constraint from a table.

```sql
ALTER TABLE table_name
DROP CONSTRAINT constraint_name;
```

**Example:**
```sql
ALTER TABLE sales
DROP CONSTRAINT unique_product;
```

### 9. **Rename the Table**

You can rename an entire table using the `RENAME TO` clause.

```sql
ALTER TABLE old_table_name
RENAME TO new_table_name;
```

**Example:**
```sql
ALTER TABLE sales
RENAME TO sales_data;
```

### 10. **Add an Index**

You can create an index on one or more columns.

```sql
CREATE INDEX index_name ON table_name (column_name);
```

**Example:**
```sql
CREATE INDEX idx_product ON sales (product);
```

### 11. **Drop an Index**

You can drop an existing index.

```sql
DROP INDEX index_name;
```

**Example:**
```sql
DROP INDEX idx_product;
```

### Summary
The `ALTER TABLE` statement in PostgreSQL provides a powerful way to modify the structure of existing tables. When using it, ensure to consider the impact of these changes on your data and any existing queries that might rely on the current schema. Always back up your data before making significant alterations.

In PostgreSQL, you can perform various alterations at the database level using the `ALTER DATABASE` command. Here are the types of alterations you can do along with their syntax:

### 1. **Rename a Database**

You can rename an existing database.

```sql
ALTER DATABASE old_database_name RENAME TO new_database_name;
```

**Example:**
```sql
ALTER DATABASE mydb RENAME TO my_new_db;
```

### 2. **Change Database Owner**

You can change the owner of a database.

```sql
ALTER DATABASE database_name OWNER TO new_owner;
```

**Example:**
```sql
ALTER DATABASE mydb OWNER TO newuser;
```

### 3. **Set Database Connection Limit**

You can set a limit on the number of concurrent connections to the database.

```sql
ALTER DATABASE database_name CONNECTION LIMIT new_limit;
```

**Example:**
```sql
ALTER DATABASE mydb CONNECTION LIMIT 100;
```

### 4. **Set Database Encoding**

You can change the encoding of a database.

```sql
ALTER DATABASE database_name SET ENCODING TO 'encoding_name';
```

**Example:**
```sql
ALTER DATABASE mydb SET ENCODING TO 'UTF8';
```

### 5. **Set Database Locale**

You can set the locale for a database.

```sql
ALTER DATABASE database_name SET LC_COLLATE TO 'locale_name';
ALTER DATABASE database_name SET LC_CTYPE TO 'locale_name';
```

**Example:**
```sql
ALTER DATABASE mydb SET LC_COLLATE TO 'en_US.UTF-8';
ALTER DATABASE mydb SET LC_CTYPE TO 'en_US.UTF-8';
```

### 6. **Set Database Default Tablespace**

You can set the default tablespace for a database.

```sql
ALTER DATABASE database_name SET TABLESPACE tablespace_name;
```

**Example:**
```sql
ALTER DATABASE mydb SET TABLESPACE my_tablespace;
```

### 7. **Change Database Comment**

You can add or change a comment for the database.

```sql
ALTER DATABASE database_name SET COMMENT TO 'new comment';
```

**Example:**
```sql
ALTER DATABASE mydb SET COMMENT TO 'This is my database';
```

### 8. **Drop a Database**

You can remove a database entirely.

```sql
DROP DATABASE database_name;
```

**Example:**
```sql
DROP DATABASE mydb;
```

### Summary
The `ALTER DATABASE` command in PostgreSQL allows you to manage various aspects of a database. When performing these alterations, ensure to consider their impact on applications, users, and ongoing transactions. Always back up your database before making significant changes to prevent data loss.