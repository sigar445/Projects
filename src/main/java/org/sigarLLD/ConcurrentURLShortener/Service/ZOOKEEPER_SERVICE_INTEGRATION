To modify your `JpaURLService` class to generate the short URLs using **Zookeeper**, you can replace the `generateTinyUrl()` method with logic that fetches a unique value from Zookeeper. This involves using Zookeeper to manage the counter for generating unique short URLs.

### Step 1: Integrate Zookeeper in `JpaURLService`

1. **Add Zookeeper Dependencies**: Make sure you have added the required dependencies for Zookeeper in your `pom.xml`:

```xml
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-recipes</artifactId>
    <version>5.3.0</version> <!-- Use the latest stable version -->
</dependency>
<dependency>
    <groupId>org.apache.curator</groupId>
    <artifactId>curator-client</artifactId>
    <version>5.3.0</version>
</dependency>
```

### Step 2: Modify `JpaURLService`

Below is the modified version of your `JpaURLService` class, integrating Zookeeper for generating unique short URLs.

```java
package org.sigarLLD.ConcurrentURLShortener.Service;

import jakarta.persistence.OptimisticLockException;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.sigarLLD.ConcurrentURLShortener.Helper.CustomOptimisticLockException;
import org.sigarLLD.ConcurrentURLShortener.Helper.InvalidUrlException;
import org.sigarLLD.ConcurrentURLShortener.Helper.ResourceNotFoundException;
import org.sigarLLD.ConcurrentURLShortener.Model.UrlShortened;
import org.sigarLLD.ConcurrentURLShortener.Repo.UrlRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;

@Service
public class JpaURLService implements URLService {
    private final UrlRepo urlRepository;
    private final CuratorFramework zookeeperClient;

    @Autowired
    public JpaURLService(UrlRepo urlRepo) throws Exception {
        this.urlRepository = urlRepo;

        // Connect to Zookeeper
        this.zookeeperClient = CuratorFrameworkFactory.newClient("localhost:2181", new ExponentialBackoffRetry(1000, 3));
        this.zookeeperClient.start();

        // Initialize the counter node if it doesn't exist
        if (zookeeperClient.checkExists().forPath("/url-shortener/counter") == null) {
            zookeeperClient.create().creatingParentsIfNeeded().forPath("/url-shortener/counter", "1".getBytes());
        }
    }

    @Override
    public UrlShortened getOriginalUrl(String tinyUrl) {
        UrlShortened urlShortened = urlRepository.findByTinyUrl(tinyUrl);
        if (urlShortened == null) {
            throw new ResourceNotFoundException("URL not found for tinyURL: " + tinyUrl);
        }

        urlShortened.incrementHits();
        return urlRepository.save(urlShortened);
    }

    @Override
    public UrlShortened createShortenedUrl(String originalUrl) {
        if (!isUrlValid(originalUrl))
            throw new InvalidUrlException("Invalid URL: " + originalUrl);

        UrlShortened existingUrlShortened = urlRepository.findByUrl(originalUrl);
        if (existingUrlShortened != null) {
            return existingUrlShortened; // Return existing TinyURL
        }
        try {
            return generateShortUrl(originalUrl);
        } catch (CustomOptimisticLockException e) {
            throw new InvalidUrlException(e.toString());
        }
    }

    @Override
    public boolean updateUrlAnalytics(String tinyUrl) {
        return false;
    }

    private UrlShortened generateShortUrl(String originalUrl) throws CustomOptimisticLockException {
        String tinyUrl = generateTinyUrl(); // Now uses Zookeeper
        UrlShortened newUrlShortened = new UrlShortened(originalUrl, tinyUrl);
        newUrlShortened = saveUrl(newUrlShortened);
        return newUrlShortened; // Return the newly generated TinyURL
    }

    @Override
    public boolean isUrlValid(String longUrl) {
        try {
            longUrl = longUrl.trim(); // Trim whitespace
            URI uri = new URI(longUrl); // Create URI first
            new java.net.URL(uri.toString()); // Convert to URL
            return true;
        } catch (MalformedURLException | URISyntaxException e) {
            System.out.println("Invalid URL exception: " + e.getMessage());
            return false;
        }
    }

    @Override
    public UrlShortened saveUrl(UrlShortened urlShortened) throws CustomOptimisticLockException {
        try {
            return urlRepository.save(urlShortened);
        } catch (OptimisticLockException e) {
            // Handle the exception, e.g., retry the operation or notify the user
            throw new CustomOptimisticLockException("Update conflict occurred for URL: " + urlShortened.getUrl(), e);
        }
    }

    private String generateTinyUrl() {
        try {
            // Fetch the current counter value from Zookeeper
            byte[] currentValue = zookeeperClient.getData().forPath("/url-shortener/counter");
            long currentCounter = Long.parseLong(new String(currentValue));

            // Generate a short URL based on the counter
            String tinyUrl = String.format("%07d", currentCounter); // Generate a 7-character long string (could be altered to base62 or similar)

            // Increment the counter in Zookeeper
            long newCounter = currentCounter + 1;
            zookeeperClient.setData().forPath("/url-shortener/counter", String.valueOf(newCounter).getBytes());

            return tinyUrl;
        } catch (Exception e) {
            throw new RuntimeException("Failed to generate tiny URL from Zookeeper", e);
        }
    }
}
```

### Explanation of Changes:

1. **Zookeeper Connection**: The Zookeeper client is initialized in the constructor. It connects to Zookeeper running on `localhost:2181`.
2. **Counter Node Initialization**: It checks if the counter node exists and initializes it to `1` if it does not.
3. **Generate Tiny URL Method**: The `generateTinyUrl()` method retrieves the current counter from Zookeeper, generates a 7-character long string, and then increments the counter in Zookeeper.
4. **Error Handling**: Errors in connecting to or fetching data from Zookeeper are caught and wrapped in a runtime exception.

### Step 3: Run and Test

1. **Run your Spring Boot application**: Ensure that Zookeeper is running and accessible.
2. **Create and Retrieve URLs**: Test creating short URLs and retrieving them to see if they are being generated correctly and stored in the PostgreSQL database.

### Step 4: Close Zookeeper Client (optional)

If you want to cleanly close the Zookeeper client when your application shuts down, you can implement `@PreDestroy`:

```java
import javax.annotation.PreDestroy;

// ...

@PreDestroy
public void closeZookeeperClient() {
    zookeeperClient.close();
}
```

With this setup, your URL shortener should now generate unique short URLs using Zookeeper while storing the mappings in an external PostgreSQL database.