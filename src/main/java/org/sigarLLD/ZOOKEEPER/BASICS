### What is Zookeeper?

**Apache Zookeeper** is an open-source distributed coordination service for managing large-scale distributed systems. It provides a centralized infrastructure for maintaining configuration information, naming, synchronization, and providing group services. Essentially, Zookeeper acts as a distributed service that helps applications coordinate processes in a fault-tolerant manner.

### Key Features of Zookeeper:
- **Coordination**: It helps multiple processes (or servers) work together by providing consistent and up-to-date configuration information.
- **Synchronization**: Zookeeper ensures that processes don’t step on each other’s toes when accessing shared resources.
- **Fault Tolerance**: If one Zookeeper server goes down, others will keep the system running.
- **Atomic Broadcast**: Zookeeper uses this protocol to guarantee synchronization across servers.
- **Consistent**: All Zookeeper nodes have the same view of the data at any point in time.

### Main Components of Zookeeper:

1. **ZNodes**:
   - Zookeeper stores data in a hierarchical structure similar to a file system.
   - Each node in the tree is called a **ZNode**, and it can hold data as well as child nodes.
   - ZNodes are the core data entities in Zookeeper and have a path like `/path/to/znode`.

2. **Zookeeper Ensemble**:
   - A Zookeeper ensemble consists of multiple Zookeeper servers.
   - A quorum (majority) of servers must be up and running for Zookeeper to operate.
   - Clients can connect to any Zookeeper server, and the server will forward the request to the appropriate server in the ensemble.

3. **Leader and Follower**:
   - Zookeeper uses a leader-follower architecture.
   - The leader processes all the write requests, while the followers handle the read requests.
   - If the leader goes down, a new leader is elected automatically.

4. **Session**:
   - Clients connect to Zookeeper through a session. If the session times out, the client will have to reconnect.

5. **Watches**:
   - A **watch** is a one-time trigger that is set on a ZNode.
   - When the data or children of the ZNode change, the watch is triggered, and the client receives a notification.

### How is Zookeeper Used in Java Spring Boot Projects?

In Spring Boot projects, Zookeeper is often used for **distributed coordination**, **service discovery**, **leader election**, and **managing configuration** across multiple instances of services in a distributed environment. For example:
- **Service Discovery**: Zookeeper keeps track of all the services (like instances of microservices) and their network locations (IP and port) in real-time. Clients query Zookeeper to discover available services.
- **Distributed Locking**: Zookeeper can help ensure that only one instance of your service is performing certain critical tasks at a time.
- **Leader Election**: In distributed systems, Zookeeper is used to elect a leader among multiple nodes to manage tasks centrally.

#### Integrating Zookeeper with Spring Boot
You can integrate Zookeeper into a Spring Boot project using the **Spring Cloud Zookeeper** dependency. Spring Cloud provides out-of-the-box features to connect with Zookeeper for service discovery and configuration management.

1. Add Zookeeper dependency in `pom.xml`:

   ```xml
   <dependency>
       <groupId>org.springframework.cloud</groupId>
       <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>
   </dependency>
   ```

2. Configure `application.properties`:

   ```properties
   spring.cloud.zookeeper.connect-string=localhost:2181
   spring.application.name=my-service
   ```

   This will connect your Spring Boot app to a Zookeeper instance running on `localhost`.

3. Use Zookeeper for service registration/discovery:

   - Register the service automatically with Zookeeper upon application startup.
   - Discover other services registered with Zookeeper for dynamic routing.

### How to Monitor Zookeeper (Browser or Terminal)

#### Using the Zookeeper CLI (Terminal)

You can interact with Zookeeper through its CLI (Command-Line Interface). To access the Zookeeper CLI:

```bash
bin/zkCli.sh -server localhost:2181
```

- **Basic Commands**:
  - `ls /`: Lists the nodes at the root level.
  - `create /my-node "data"`: Creates a new ZNode `/my-node` with some data.
  - `get /my-node`: Retrieves the data stored in `/my-node`.
  - `set /my-node "new-data"`: Updates the data in `/my-node`.
  - `delete /my-node`: Deletes `/my-node`.
  - `stat /my-node`: Returns the status (metadata) of the node.

#### Using Zookeeper with JMX (Java Management Extensions) for Monitoring in a Browser

1. **Enable JMX in Zookeeper**:
   By default, Zookeeper has JMX (Java Management Extensions) enabled. JMX is a standard API for monitoring and managing Java applications.

2. **Access JMX via a JMX client**:
   - Use a JMX client like **JVisualVM** or **JConsole** to connect to Zookeeper. These tools allow you to monitor Zookeeper’s memory usage, thread count, and other JVM-related metrics.

   - To connect, run:
     ```bash
     jconsole
     ```
     Then, connect to `localhost:2181` (or the relevant port) to monitor Zookeeper.

3. **Use AdminServer for a Web Interface**:
   Zookeeper can be configured with an `AdminServer` to provide a web-based interface for monitoring. To enable this, add the following to your `zoo.cfg`:

   ```properties
   admin.serverPort=8080
   ```

   Then, you can access the Zookeeper Admin UI via your browser at:

   ```
   http://localhost:8080/commands
   ```

#### Key Zookeeper Configuration in `zoo.cfg`

Some important configurations that can be set in the `zoo.cfg` file:

- **Data Directory**:

  ```properties
  dataDir=/var/lib/zookeeper
  ```

- **Client Port**: The port where the Zookeeper clients connect.

  ```properties
  clientPort=2181
  ```

- **TickTime**: The length of a tick in milliseconds. This defines the heartbeat interval for the Zookeeper servers.

  ```properties
  tickTime=2000
  ```

- **InitLimit**: The amount of time to allow followers to connect to the leader.

  ```properties
  initLimit=10
  ```

- **SyncLimit**: The maximum time the followers can lag behind the leader.

  ```properties
  syncLimit=5
  ```

---

### Summary of Basic Zookeeper Commands:

- **Start Zookeeper**:
  ```bash
  bin/zkServer.sh start
  ```

- **Stop Zookeeper**:
  ```bash
  bin/zkServer.sh stop
  ```

- **Status**:
  ```bash
  bin/zkServer.sh status
  ```

- **Connect to Zookeeper CLI**:
  ```bash
  bin/zkCli.sh -server localhost:2181
  ```

- **Basic CLI operations**:
  - List nodes: `ls /`
  - Create node: `create /my-node "data"`
  - Get node data: `get /my-node`
  - Set node data: `set /my-node "new-data"`
  - Delete node: `delete /my-node`

Zookeeper is powerful for building robust, distributed applications and can handle coordination, synchronization, and service discovery tasks efficiently within a Spring Boot project.