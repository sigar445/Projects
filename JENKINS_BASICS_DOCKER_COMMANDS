### Jenkins Architecture

Jenkins is an open-source automation server used primarily for continuous integration (CI) and continuous delivery (CD). Its architecture is modular, which allows it to be highly customizable and scalable.

#### 1. **Components of Jenkin  s Architecture**:
   - **Jenkins Master**:
     - **Primary server**: The Jenkins master handles:
       - Scheduling jobs.
       - Dispatching builds to nodes (agents).
       - Monitoring agents.
       - Recording and presenting the build results.
     - **Plugins**: The master also integrates with a variety of plugins, which extend its functionality (e.g., Git, Docker, pipeline automation, etc.).

   - **Jenkins Agent (Slave)**:
     - **Distributed nodes**: Agents are remote or local machines connected to the master.
     - **Execution**: Agents execute tasks assigned by the master (e.g., running build steps, tests, or deployments).
     - Agents help with load distribution by offloading tasks to other machines.

#### 2. **How Jenkins Works**:
   - **Job Scheduling**: The Jenkins master schedules jobs (builds or pipelines) based on triggers (e.g., code pushes, time-based scheduling).
   - **Communication**: The master and agent communicate over SSH or JNLP protocols, ensuring that build tasks are executed on the agents.
   - **Build Execution**: Jobs are executed on the agents, and the results are sent back to the master.
   - **Build Results**: Jenkins stores and shows detailed build logs and results, making it easy to track the state of builds and identify issues.

#### 3. **Jenkins Workflow**:
   - **Build Triggers**: Jenkins triggers a build based on Git commits, time schedules (cron jobs), or manual initiation.
   - **Build Execution**: Jenkins checks out the project from the repository (like GitHub), runs tests or compiles code, and produces an artifact (e.g., a JAR or Docker image).
   - **Post-build Steps**: After a successful build, Jenkins can run additional steps like deployment, notifications, or archival of artifacts.

---

### Resources to Learn Jenkins Basics and Git Integration

#### 1. **Official Jenkins Documentation**
   - The official Jenkins website has comprehensive documentation for all major topics:
     - [Jenkins Basics](https://www.jenkins.io/doc/book/)
     - [Pipeline Tutorials](https://www.jenkins.io/doc/pipeline/)
     - [Git Integration](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-git)
   - It covers everything from setting up Jenkins, job configuration, and plugins to advanced topics like pipelines and agent management.

#### 2. **Jenkins Installation and Setup**:
   - **Video Tutorials**:
     - *[Jenkins Tutorial for Beginners (2023)](https://www.youtube.com/watch?v=FsbX1z1G8Gk)* – A popular video tutorial that covers installation, basic job setup, and plugins.
   - **Text-based Guides**:
     - *[Jenkins Setup on Windows/Linux](https://www.jenkins.io/doc/book/installing/)* – A step-by-step guide on installing Jenkins on different platforms.

#### 3. **Git Integration with Jenkins**:
   - **Tutorials**:
     - *[Jenkins + GitHub Integration Guide](https://www.jenkins.io/doc/book/blueocean/getting-started/#github-integration)* – Explains how to connect Jenkins with a GitHub repository using access tokens and webhook triggers.
     - *[Automating CI/CD with GitHub and Jenkins](https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/#fork-and-clone-the-sample-repository)* – A tutorial for building and testing Java applications using GitHub repositories.

   - **Video**:
     - *[Jenkins + GitHub Integration (CI/CD Pipeline)](https://www.youtube.com/watch?v=h9moIXfPdK0)* – A video walkthrough that covers Jenkins integration with GitHub using webhook triggers.

#### 4. **Jenkins Plugin Ecosystem**:
   - Jenkins is known for its plugin-based architecture, and mastering the plugin system is crucial for automating various CI/CD processes.
     - *[Top Jenkins Plugins](https://www.jenkins.io/doc/book/managing/plugins/)* – The list of the most commonly used plugins, including Git, Docker, and pipeline plugins.
     - *[Pipeline Plugin Tutorial](https://www.jenkins.io/doc/pipeline/tour/getting-started/)* – A great starting point to understand the Jenkins pipeline plugin, which allows you to define CI/CD workflows in a Jenkinsfile.

#### 5. **Jenkinsfile and Pipelines**:
   - Jenkinsfile is a key configuration file used to define pipelines as code.
   - **Jenkinsfile Guide**:
     - *[Jenkinsfile Syntax](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)* – Learn about Jenkinsfile syntax and how to define stages, steps, and post-build actions.
   - **Video**:
     - *[Jenkins Pipeline Tutorial for Beginners](https://www.youtube.com/watch?v=Gvge0V_HbP4)* – A complete guide to creating and managing Jenkins pipelines.

---

### Steps to Set Up Jenkins with GitHub (Git Integration)

1. **Install Git and GitHub Plugins in Jenkins**:
   - Go to **Manage Jenkins** → **Manage Plugins**.
   - Search for and install:
     - *Git Plugin*: For Git-based source code management.
     - *GitHub Integration Plugin*: For integrating with GitHub, setting up webhooks, and triggering builds based on commits.

2. **Configure Git in Jenkins**:
   - Go to **Manage Jenkins** → **Global Tool Configuration**.
   - Under **Git**, provide the path to the Git executable (e.g., `C:\Program Files\Git\bin\git.exe`).
   - Ensure Jenkins can detect the Git version by testing in a job’s console output.

3. **Add GitHub Credentials in Jenkins**:
   - Go to **Manage Jenkins** → **Manage Credentials**.
   - Add **Username and Password** or **Personal Access Token** as credentials for GitHub.
   - Name the credential, e.g., `github-token`.

4. **Set Up Jenkins Job with GitHub**:
   - In the Jenkins job configuration:
     - Under **Source Code Management**, choose **Git**.
     - Add your GitHub repository URL and select the credentials (`github-token`) for authentication.
     - Choose the appropriate branch, e.g., `*/master` or `*/jenkins-branch`.

5. **Trigger Builds via Webhooks**:
   - Set up a webhook in your GitHub repository to notify Jenkins of changes:
     - Go to **GitHub repository** → **Settings** → **Webhooks** → **Add webhook**.
     - Use the Jenkins URL with `/github-webhook/` at the end, e.g., `http://<jenkins-server>/github-webhook/`.
     - Select **Push events** as the trigger.

---

These resources and steps will give you a solid foundation for understanding Jenkins architecture and setting up GitHub integration for CI/CD.

To set up Jenkins to run your JAR file in Docker using pipelines, you can follow these steps. Since you already have a `Jenkinsfile` in your code, I'll guide you through modifying it to include the Docker build and run steps, as well as using a script-based approach for an alternative iteration.

### Step 1: Ensure Docker Is Installed on Your Jenkins Server
Make sure that Docker is installed on the Jenkins server and the Jenkins user has the necessary permissions to run Docker commands.

### Step 2: Modify the `Jenkinsfile`
Here’s how you can update your `Jenkinsfile` to build the JAR, create a Docker image, and run the container:

```groovy
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Pull code from GitHub
                checkout scm
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    // Use Maven to build the JAR
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using the Dockerfile in the project
                    def app = docker.build("urlshortener-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    sh 'docker run -d -p 8080:8080 urlshortener-app:${env.BUILD_ID}'
                }
            }
        }
    }

    post {
        always {
            // Cleanup Docker containers/images after the pipeline
            script {
                sh 'docker rm $(docker ps -a -q) || true'
                sh 'docker rmi urlshortener-app:${env.BUILD_ID} || true'
            }
        }
    }
}
```

### Key Steps:
- **Checkout**: Pulls code from the Git repository.
- **Build JAR**: Uses Maven to compile the project and create the JAR file.
- **Build Docker Image**: Builds a Docker image using the `Dockerfile` in your project directory, tagging it with the build ID.
- **Run Docker Container**: Runs the Docker container, exposing port 8080 to match your Spring Boot application settings.
- **Post Cleanup**: Cleans up any running containers and removes the Docker image to save space.

### Step 3: Create a `Dockerfile` (If not already present)
Ensure your project contains a `Dockerfile` in its root directory for building the Docker image:

```dockerfile
# Use an official OpenJDK runtime as a parent image
FROM openjdk:17-jdk-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the JAR file from the target directory into the container
COPY target/SoftwareBooksCode-1.0-SNAPSHOT.jar /app/urlshortener.jar

# Run the JAR file
ENTRYPOINT ["java", "-jar", "urlshortener.jar"]
```

### Step 4: Alternative Iteration Using a Build Script
You can also create a build script to handle the entire build process (JAR compilation, Docker build, Docker run). Here's an example of a shell script (`build_and_run.sh`):

```bash
#!/bin/bash

# Step 1: Build the JAR
echo "Building the JAR file..."
mvn clean package

# Step 2: Build Docker Image
echo "Building Docker Image..."
docker build -t urlshortener-app .

# Step 3: Run Docker Container
echo "Running Docker Container..."
docker run -d -p 8080:8080 urlshortener-app
```

You can trigger this script from your `Jenkinsfile`:

```groovy
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Build Script') {
            steps {
                script {
                    // Run the build script
                    sh './build_and_run.sh'
                }
            }
        }
    }

    post {
        always {
            // Cleanup
            sh 'docker rm $(docker ps -a -q) || true'
            sh 'docker rmi urlshortener-app || true'
        }
    }
}
```

### Step 5: Execute the Jenkins Job
After setting up the `Jenkinsfile` and `Dockerfile`, commit your changes to the repository. When Jenkins runs the pipeline, it will:
1. Build the JAR file.
2. Build the Docker image.
3. Run the Docker container.

You can monitor the process through Jenkins' console output.

Let me know if you need further details or adjustments!